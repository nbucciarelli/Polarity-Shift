sampler2D g_samSrcColor;

float gamma;

 /*
// Gamma correction pixel shader
float4 ps_main( float2 Tex : TEXCOORD0 ) : COLOR0
{
	// Gamma shader
    float4 Color = tex2D( g_samSrcColor, Tex.xy);

	return pow( Color, 1.0f / gamma ); // color^(1/gamma)
}
*/

// DIRECTIONS:  Comment in certain effects to see what they do 
//				(make sure only ONE effect is uncommented at a time!)
float4 ps_main( float2 Tex : TEXCOORD0 ) : COLOR0
{
	float4 Color;

//	// Get color out of texture based on texture coordinates
//	Color = tex2D( g_samSrcColor, Tex.xy); 
//
//	/*
//	// Brighter
//	Color = tex2D( g_samSrcColor, Tex.xy)*3;
//	*/
//	
//	/*
//	// Inverted
//	Color = 1.0f-tex2D( g_samSrcColor, Tex.xy);
//	Color.a = 1.0f;
//	/**/
//
//	/*
//	// Greyscale (Luminance filter)
//	float fLuminance = 0.299f*Color.r + 0.587f*Color.g + 0.114f*Color.b;
//	//gamma = 1.0f - gamma;
//	Color = float4( fLuminance * gamma, fLuminance * gamma, fLuminance * gamma, 1.0f ); 
//	/**/
//	
//	/*
//	// Greyscale (Luminance filter)
//	float fLuminance = (Color.r + Color.g + Color.b);//0.299f*Color.r + 0.587f*Color.g + 0.114f*Color.b;
//	gamma = 0.0f + gamma;
//	Color = float4( Color.r * gamma, Color.g * gamma, Color.b * gamma, 1.0f ); 
//	/**/
//	
//	/*
//	// This makes it grey out over time (if gamma is changed by game code)
//	//gamma = 1.0f - gamma;	
//	//fLuminance*gamma, fLuminance*gamma, fLuminance*gamma, 1.0f );
//	*/
//	
//	/* Other Luminance filter (under construction)
//	//float3 LuminanceConv = { 0.2125f, 0.7154f, 0.0721f };
//	// return dot( (float3)tex2D( g_samSrcColor, Tex ), LuminanceConv ) * 2.0f;
//	//float lum = Color.r * 0.2 + Color.g * 0.7f + Color.b * 0.1f;
//	//Color.rgb = lum;
//	*/
//	
//	/*
//	// Black and white
//	Color.a = 1.0f;
//	Color = tex2D( g_samSrcColor, Tex.xy);
//	Color.rgb = (Color.r+Color.g+Color.b)/3.0f;
//
//	if (Color.r<0.2 || Color.r>0.8) Color.r = 0.0f; else Color.r = 1.0f;
//	if (Color.g<0.2 || Color.g>0.8) Color.g = 0.0f; else Color.g = 1.0f;
//	if (Color.b<0.2 || Color.b>0.8) Color.b = 0.0f; else Color.b = 1.0f;
//	*/
//
//	/*
//	// RED!
//	Color = tex2D( g_samSrcColor, Tex.xy);
//	Color.r = Color.r*2;
//	/**/
//
//	/*
//	// AH! MY EYES!!
//	Color = tex2D( g_samSrcColor, Tex.xy);
//	Color.r = Color.r*sin(Tex.y*100)*2;
//	Color.g = Color.g*cos(Tex.y*200)*2;
//	Color.b = Color.b*sin(Tex.y*300)*2;
//	/**/
//	
//	
//	// Weird fade	
//	Color = tex2D( g_samSrcColor, Tex.xy)*Tex.y;
//	/**/
//
//	/*
//	// Stretch
//	Tex.y = Tex.y * 0.5;
//	Color = tex2D( g_samSrcColor, Tex.xy);
//	*/
//		
//	
//	// Wavey (static) Special Thanks to Paul
//	/*
//	Tex.y = Tex.y + (sin(Tex.x * 100) * 0.01);
//	Color = tex2D( g_samSrcColor, Tex.xy);
//	*/
//	
//	/*
//	// Wavey (moving) Special Thanks to Paul
//	Tex.y = Tex.y + ((sin((Tex.x + gamma) * 5.0) * 0.15) * 0.1);
//	Tex.x = Tex.x + ((cos((Tex.y + gamma) * 5.0) * 0.15) * 0.1);
//	Color = tex2D( g_samSrcColor, Tex.xy);
//	*/
//
//	/*
//	// Pixelate (doesn't work yet)
//	float2 f2szI = 1.0/f2szPix;
//
//	int2 n2Dims = ceil(f2szI / ceil(g_fPixelationSize));
//
//	float2 f2szO = (n2Dims / 2) * 2 + 1;
//
//	float2 f2PixIn = f2TexCoord * f2szI;
//
//	float2 f2SizeRatio = f2szO/f2szI;
//
//	float2 f2Border = (f2szI-f2szO)*0.5 / f2szI;
//
//	float2 f2OutPixel = floor(f2PixIn*f2SizeRatio + f2Border) / f2szO;
//
//	Color = tex2D(g_samSrcColor, f2OutPixel);
//	*/
//
//	/*
//	// Moves screen in a circle
//	Tex.y = Tex.y + (sin(gamma)*0.01);
//	Tex.x = Tex.x + (cos(gamma)*0.01);
//	Color = tex2D( g_samSrcColor, Tex.xy);
//	*/	
//
//	/*
//	// Multiple samples
//	// Diagonal blur (bright)
//	Color = tex2D( g_samSrcColor, Tex.xy);
//	Color += tex2D( g_samSrcColor, Tex.xy+0.001);
//	Color += tex2D( g_samSrcColor, Tex.xy+0.002);
//	Color += tex2D( g_samSrcColor, Tex.xy+0.003);
//	*/
//
//	/*
//	// Multiple samples
//	// Diagonal blur (averaged)
//	Color = tex2D( g_samSrcColor, Tex.xy);
//	Color += tex2D( g_samSrcColor, Tex.xy+0.001);
//	Color += tex2D( g_samSrcColor, Tex.xy+0.002);
//	Color += tex2D( g_samSrcColor, Tex.xy+0.003);
//	Color = Color / 4;
//	*/
//
//	/*
//	// Sharper
//	Color = tex2D( g_samSrcColor, Tex.xy);
//	Color -= tex2D( g_samSrcColor, Tex.xy+0.0001)*10.0f;
//	Color += tex2D( g_samSrcColor, Tex.xy-0.0001)*10.0f;
//	*/
//
//	/*
//	//  Embossed
//	Color.a = 1.0f;
//	Color.rgb = 0.5f;
//	Color -= tex2D( g_samSrcColor, Tex.xy-0.001)*2.0f;
//	Color += tex2D( g_samSrcColor, Tex.xy+0.001)*2.0f;
//	Color.rgb = (Color.r+Color.g+Color.b)/3.0f;
//	*/
//	
//	
//	// EARTH QUAKE!!!
//	Tex.y = Tex.y + (sin(gamma)*0.01);
//  Tex.x = Tex.x + (cos(gamma)*0.01);
// 	Color = tex2D( g_samSrcColor, Tex.xy);
//	
//	
//
//	
    return Color;
}
