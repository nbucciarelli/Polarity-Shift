////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// File: "CAIEngine.h"
// Author: Leland Nyman (LN)
// Purpose: This file handles all events associated with AI and updates them accordingly. 
// It also stores all information needed for the AI objects
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma once
#include "../EventSystem/listener.h"
#include <vector>
using std::vector;

class enemyObj;
class playerObj;
class eventManager;
class CPowerUp;
union vector3;

class CAIEngine: public listener
{
private:
	vector<enemyObj*> enemyList;
	vector<CPowerUp*> powerUpList;
	playerObj* player;
	const vector3* trackPos;
	bool movingLeft;
	bool movingDown;
	float spawnTimer;
	
public:
	CAIEngine();

	~CAIEngine();

	//////////////////////////////////////////////////////////////////////////////////////////////////////
	//	Function:		"update"
	//	Last Modified:	September 6, 2008
	//	Purpose:		updates all AI based objects
	//////////////////////////////////////////////////////////////////////////////////////////////////////
	void update(float dt);

	//////////////////////////////////////////////////////////////////////////////////////////////////////
	//	Function:		"HandleEvent"
	//	Last Modified:	September 6, 2008
	//	Purpose:		Handles all events associated with AI
	//////////////////////////////////////////////////////////////////////////////////////////////////////
	void HandleEvent(gameEvent *ev);
	
	const vector3* GetTrackPos() const { return trackPos; }
	
};