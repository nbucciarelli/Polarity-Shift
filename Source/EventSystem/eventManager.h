//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//	File:		"eventManager.h"
//	Author:		Scott Smallback (SS)
//	Purpose:	Manages the events
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma once

#include "gameEvent.h"
#include <list>
#include <map>
using std::multimap;
using std::pair;
using std::list;

class listener;

typedef multimap<EvID, listener*> clientMap;

class eventManager
{
protected:
	//'client' listing.  Who wants what event.
	clientMap clientList;

	//event processing stack
	list<gameEvent> currentEvents;
	list<gameEvent> globalEvents;

	//Singleton protection
	eventManager(void);
	eventManager(const eventManager&);
	eventManager& operator=(const eventManager&);

	bool isRegistered(EvID id, listener* client);
	void runEvent(gameEvent* theEvent);
public:
	~eventManager(void);

	//////////////////////////////////////////////////////////////////////////////////////////////////////
	//	Function:		"getInstance"
	//	Last Modified:	August 25, 2008
	//	Purpose:		Gets the instance of the singleton
	//////////////////////////////////////////////////////////////////////////////////////////////////////
	static eventManager* getInstance();

	//////////////////////////////////////////////////////////////////////////////////////////////////////
	//	Function:		"shutdown"
	//	Last Modified:	August 25, 2008
	//	Purpose:		shuts down the event manager
	//////////////////////////////////////////////////////////////////////////////////////////////////////
	void shutdown(void);
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////
	//	Function:		"registerClient"
	//	Last Modified:	August 25, 2008
	//	Purpose:		Adds a client to an event watch.  Adds the event if it's not in the map.
	//////////////////////////////////////////////////////////////////////////////////////////////////////
	void registerClient(EvID eventID, listener* client);

	//////////////////////////////////////////////////////////////////////////////////////////////////////
	//	Function:		"unregisterClient"
	//	Last Modified:	August 25, 2008
	//	Purpose:		removes client from the given event
	//////////////////////////////////////////////////////////////////////////////////////////////////////
	void unregisterClient(EvID eventID, listener* client);

	//////////////////////////////////////////////////////////////////////////////////////////////////////
	//	Function:		"unregisterClient"
	//	Last Modified:	August 25, 2008
	//	Purpose:		removes client from all events it's watching::Note that this is less efficient than specifics
	//////////////////////////////////////////////////////////////////////////////////////////////////////
	void unregisterClient(listener* client);

	//////////////////////////////////////////////////////////////////////////////////////////////////////
	//	Function:		"sendEvent"
	//	Last Modified:	August 25, 2008
	//	Purpose:		adds an event to the processing stack
	//////////////////////////////////////////////////////////////////////////////////////////////////////
	void sendEvent(EvID eventID, void* data = NULL);

	//////////////////////////////////////////////////////////////////////////////////////////////////////
	//	Function:		"sendGlobalEvent"
	//	Last Modified:	August 25, 2008
	//	Purpose:		adds an event to the global processing stack
	//////////////////////////////////////////////////////////////////////////////////////////////////////
	void sendGlobalEvent(EvID eventID, void* data = NULL);

	//////////////////////////////////////////////////////////////////////////////////////////////////////
	//	Function:		"sendEvent"
	//	Last Modified:	August 25, 2008
	//	Purpose:		go through the events stack
	//////////////////////////////////////////////////////////////////////////////////////////////////////
	void processEvents(void);

	//////////////////////////////////////////////////////////////////////////////////////////////////////
	//	Function:		"processGlobalEvents"
	//	Last Modified:	August 25, 2008
	//	Purpose:		go through the global events stack
	//////////////////////////////////////////////////////////////////////////////////////////////////////
	void processGlobalEvents();

	//////////////////////////////////////////////////////////////////////////////////////////////////////
	//	Function:		"clearLocalEvents"
	//	Last Modified:	August 25, 2008
	//	Purpose:		dumps event stack
	//////////////////////////////////////////////////////////////////////////////////////////////////////
	void clearLocalEvents(void);

	//////////////////////////////////////////////////////////////////////////////////////////////////////
	//	Function:		"clearGlobalEvents"
	//	Last Modified:	August 25, 2008
	//	Purpose:		dumps global event stack
	//////////////////////////////////////////////////////////////////////////////////////////////////////
	void clearGlobalEvents();

	//////////////////////////////////////////////////////////////////////////////////////////////////////
	//	Function:		"clearAllEvents"
	//	Last Modified:	August 25, 2008
	//	Purpose:		dumps all event stacks
	//////////////////////////////////////////////////////////////////////////////////////////////////////
	void clearAllEvents();
};
