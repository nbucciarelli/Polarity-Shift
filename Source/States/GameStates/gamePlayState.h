#pragma once
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// File: “gamePlayState.h”
// Author: Scott Smallback (SS)
// Purpose: This is the header file for the game play state
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "../gameState.h"
#include "../../eventsystem/listener.h"
#include <queue>
using std::queue;

class objManager;
class CSGD_DirectInput;
typedef CSGD_DirectInput inputDevice;
class eventManager;
class playHandler;
class CTileEngine;
class CAIEngine;
union vector3;
class mouse;
class bitFont;
class debugControl;

class gamePlayState : public gameState, public listener
{
protected:
	CTileEngine* TE;
	CAIEngine* AIE;
	objManager * OM;
	inputDevice* theInput;
	eventManager* EM;
	playHandler* handler;
	bitFont* theFont;
	debugControl* debugger;
	float timeMod;

	std::queue<char> m_qCheatCode;

	int m_nParticleImageID, m_nExpX, m_nExpY, m_nExplosionID;
	bool m_bIsExploding, m_bIsGodMode;

	float m_fLevelTime;
	float m_fLevelScore;

	bool Tutorials[4];
	
	volatile bool rendering;

	mouse* theMouse;

	gamePlayState();
	gamePlayState(const gamePlayState&);
	gamePlayState& operator=(const gamePlayState&);
	~gamePlayState();

public:

	bool m_bTrapActive;
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Function: “getInstance”
	// Last modified: August 27, 2008
	// Purpose: This gets the instance of the game play state
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	static gamePlayState* getInstance();

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Function: “enter”
	// Last modified: August 27, 2008
	// Purpose: Enters the game play state
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	virtual void enter(void);
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Function: “exit”
	// Last modified: August 27, 2008
	// Purpose: Exits the game play state
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual void exit(void);

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Function: “input”
	// Last modified: August 27, 2008
	// Purpose: Input used for the game play state
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual bool input(float dt);

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Function: “update”
	// Last modified: August 27, 2008
	// Purpose: Updates the game play state
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	virtual void update(float dt);
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Function: “render”
	// Last modified: August 27, 2008
	// Purpose: Renders the game play state
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual void render(void) const;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Function: “HandleEvent”
	// Last modified: August 27, 2008
	// Purpose: Renders the game play state
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void HandleEvent(gameEvent* ev);

	float GetLevelTime() {return m_fLevelTime;}
	float GetLevelScore() {return m_fLevelScore;}
	void SetLevelScore(float val) { m_fLevelScore = val; }
	int GetExpX() const { return m_nExpX; }
	void SetExpX(int val) { m_nExpX = val; }
	int GetExpY() const { return m_nExpY; }
	void SetExpY(int val) { m_nExpY = val; }
	bool GetIsExploding() const { return m_bIsExploding; }
	void SetIsExploding(bool val) { m_bIsExploding = val; }
	bool GetIsGodMode() const { return m_bIsGodMode; }
	void SetIsGodMode(bool val) { m_bIsGodMode = val; }
};