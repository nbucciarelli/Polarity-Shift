////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// File: "CTallySheetState.h"
// Author: Nick Bucciarelli (NB)
// Purpose: This file is the transition between levels
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma once
#include "..\GameStates\menuState.h"

class CTallySheetState : public menuState
{
private:
	enum menuOptions { 	EXIT, TOTAL	};

	float m_fTimeTaken;
	float m_fTempTime;
	float m_fScoreGiven;
	float m_fTempScore;
	bool m_bIsDone;

	//Singleton protection
	CTallySheetState(void);
	CTallySheetState(const CTallySheetState&);
	CTallySheetState& operator=(const CTallySheetState&);
	~CTallySheetState(void);
	
	void menuHandler();
public:

	//////////////////////////////////////////////////////////////////////////////////////////////////////
	//	Function:		"getInstance"
	//	Last Modified:	September 16, 2008
	//	Purpose:		Gets the instance for the TallySheet singleton
	//////////////////////////////////////////////////////////////////////////////////////////////////////
	static CTallySheetState* getInstance()
	{
		static CTallySheetState playa;
		return &playa;
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////
	//	Function:		"enter"
	//	Last Modified:	September 16, 2008
	//	Purpose:		enters the state
	//////////////////////////////////////////////////////////////////////////////////////////////////////
	void enter(void);
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////
	//	Function:		"exit"
	//	Last Modified:	September 16, 2008
	//	Purpose:		exits the state
	//////////////////////////////////////////////////////////////////////////////////////////////////////
	void exit(void);

	//////////////////////////////////////////////////////////////////////////////////////////////////////
	//	Function:		"udpate"
	//	Last Modified:	September 16, 2008
	//	Purpose:		updates the state
	//////////////////////////////////////////////////////////////////////////////////////////////////////
	void update(float dt);

	//////////////////////////////////////////////////////////////////////////////////////////////////////
	//	Function:		"render"
	//	Last Modified:	September 16, 2008
	//	Purpose:		renders the state
	//////////////////////////////////////////////////////////////////////////////////////////////////////
	void render(void) const;

	//////////////////////////////////////////////////////////////////////////////////////////////////////
	//	Function:		"initialize"
	//	Last Modified:	September 16, 2008
	//	Purpose:		initializes the values in the state
	//////////////////////////////////////////////////////////////////////////////////////////////////////
	void Initialize(float fScoreGiven, float fTimeTaken);

	float GetTimeTaken() const { return m_fTimeTaken; }
	float GetScoreGiven() const { return m_fScoreGiven; }
	void SetTimeTaken(float val) { m_fTimeTaken = val; }
	void SetScoreGiven(float val) { m_fScoreGiven = val; }	

};